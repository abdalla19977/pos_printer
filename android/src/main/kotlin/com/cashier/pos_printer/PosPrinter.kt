// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.cashier.pos_printer

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Alignments(val raw: Int) {
  LEFT(0),
  RIGHT(1),
  CENTER(2);

  companion object {
    fun ofRaw(raw: Int): Alignments? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PrinterSize(val raw: Int) {
  SIZE_58MM(0),
  SIZE_80MM(1);

  companion object {
    fun ofRaw(raw: Int): PrinterSize? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PrinterStatus(val raw: Int) {
  OUT_OF_PAPER(0),
  OVER_HEATING(1),
  COVER_OPEN(2),
  GENERAL_ERROR(3);

  companion object {
    fun ofRaw(raw: Int): PrinterStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SecondaryScreenSize (
  val width: Long,
  val hight: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SecondaryScreenSize {
      val width = pigeonVar_list[0] as Long
      val hight = pigeonVar_list[1] as Long
      return SecondaryScreenSize(width, hight)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      width,
      hight,
    )
  }
}
private open class PosPrinterPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Alignments.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PrinterSize.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PrinterStatus.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SecondaryScreenSize.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Alignments -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PrinterSize -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is PrinterStatus -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is SecondaryScreenSize -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PosPrinter {
  /**
   * initialize the printer
   * [grayLevel] works only with telpo value between 1 and 5
   *
   * Returns `0` in case of success and `1` in case of failure
   */
  fun init(grayLevel: Long): Long
  /**
   * start printing
   * used in case of printers only working with commit mode
   * like telpo printers
   */
  fun start()
  /**
   * print text
   * [text] string to be printed
   * [isBold] to set text to bold
   * [isItalic] to set text to italic
   * [textSize] 27f is preferred
   */
  fun printText(text: String, textSize: Double, isBold: Boolean, isItalic: Boolean)
  /**
   * Print a row of a table
   * [texts] text table to be printed
   * [width] determine the width of text
   * [align] determine the alignment of text in the row
   * []
   */
  fun printTable(texts: List<String>, width: List<Long>, align: List<Long>, fontSize: Long)
  /** Print an image */
  fun printBitmap(bitmap: ByteArray)
  /**
   * Due to the distance between the paper hatch and the print head,
   * the paper needs to be fed out manually
   */
  fun feedPaper(lines: Long)
  /** Set printer alignment */
  fun setAlign(align: Alignments)
  /** Get printer head size 58mm or 80mm */
  fun getPrinterSize(): PrinterSize
  /** Send String to display on 7 segments display for sunmi d3 mini */
  fun sendTextToLcdDigital(text: String)
  /** Send Image to display on LCD */
  fun sendImageLcdDigital(bitmap: ByteArray)
  /**
   * print a barcode
   * [symbology] between 0 and 8 works with sunmi and senraise
   * 0 → UPC-A
   * 1 → UPC-E
   * 2 → JAN13 (EAN13)
   * 3 → JAN8 (EAN8)
   * 4 → CODE39
   * 5 → ITF
   * 6 → CODABAR
   * 7 → CODE 93
   * 8 → CODE128
   * [height] between 1 – 255 default 162
   * [width] between 2 – 6 default 2
   */
  fun printBarcode(data: String, symbology: Long, width: Long, height: Long)
  /** print a printQrCode */
  fun printQrCode(data: String)
  /**
   * return the size of the secondary display
   * width and height in pixels
   */
  fun getSecondaryScreenSize(): SecondaryScreenSize
  /** open cash drawer for supported device */
  fun openDrawer()
  /**cut the paper after printing */
  fun cutPaper()
  /**send esc/pos [commands] as bytes */
  fun escPosCommandExe(commands: ByteArray)
  /**return the current status of the printer */
  fun getPrinterStatus(): PrinterStatus
  /**release printer after quitting app */
  fun deInitPrinter()
  fun isTelpo(): Boolean
  fun isSunmi(): Boolean
  fun isSenraise(): Boolean
  fun isPos(): Boolean
  /**
   * release printer after printing complete
   * works with telpo and pos that support commit mode
   */
  fun release()

  companion object {
    /** The codec used by PosPrinter. */
    val codec: MessageCodec<Any?> by lazy {
      PosPrinterPigeonCodec()
    }
    /** Sets up an instance of `PosPrinter` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PosPrinter?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.init$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val grayLevelArg = args[0] as Long
            val wrapped: List<Any?> = try {
              listOf(api.init(grayLevelArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.start$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.start()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.printText$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textArg = args[0] as String
            val textSizeArg = args[1] as Double
            val isBoldArg = args[2] as Boolean
            val isItalicArg = args[3] as Boolean
            val wrapped: List<Any?> = try {
              api.printText(textArg, textSizeArg, isBoldArg, isItalicArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.printTable$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textsArg = args[0] as List<String>
            val widthArg = args[1] as List<Long>
            val alignArg = args[2] as List<Long>
            val fontSizeArg = args[3] as Long
            val wrapped: List<Any?> = try {
              api.printTable(textsArg, widthArg, alignArg, fontSizeArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.printBitmap$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val bitmapArg = args[0] as ByteArray
            val wrapped: List<Any?> = try {
              api.printBitmap(bitmapArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.feedPaper$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val linesArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.feedPaper(linesArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.setAlign$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val alignArg = args[0] as Alignments
            val wrapped: List<Any?> = try {
              api.setAlign(alignArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.getPrinterSize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPrinterSize())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.sendTextToLcdDigital$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.sendTextToLcdDigital(textArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.sendImageLcdDigital$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val bitmapArg = args[0] as ByteArray
            val wrapped: List<Any?> = try {
              api.sendImageLcdDigital(bitmapArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.printBarcode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as String
            val symbologyArg = args[1] as Long
            val widthArg = args[2] as Long
            val heightArg = args[3] as Long
            val wrapped: List<Any?> = try {
              api.printBarcode(dataArg, symbologyArg, widthArg, heightArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.printQrCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.printQrCode(dataArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.getSecondaryScreenSize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getSecondaryScreenSize())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.openDrawer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.openDrawer()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.cutPaper$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cutPaper()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.escPosCommandExe$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val commandsArg = args[0] as ByteArray
            val wrapped: List<Any?> = try {
              api.escPosCommandExe(commandsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.getPrinterStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPrinterStatus())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.deInitPrinter$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.deInitPrinter()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.isTelpo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isTelpo())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.isSunmi$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isSunmi())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.isSenraise$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isSenraise())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.isPos$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isPos())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printer.PosPrinter.release$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.release()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
